# Cloud Build 設定檔，用於執行 Terraform init, plan, 和 apply

# -------------------------------------------------------------
# 預定義的替換變數 (SUBSTITUTIONS) 
# 這些變數應由 Cloud Build Trigger 或手動運行時提供。
# -------------------------------------------------------------
substitutions:
  # 執行 Terraform 的服務帳戶 (來自您的 log 分析)
  _TF_SA_EMAIL: "cloudbuild-sa@gcp-prj-sys-cicd-dev.iam.gserviceaccount.com" 
  # 遠端狀態 Bucket 名稱 (來自您的 GCS 配置)
  _STATE_BUCKET_NAME: "gcp-prj-tfstate-1111" 
  # Artifact Bucket 名稱
  _ARTIFACT_BUCKET_NAME: "gcp-prj-tfstate-1111" 
  # Terraform Runner 映像檔 (使用官方)
  _TF_IMAGE: "hashicorp/terraform:1.7.0"

timeout: '1200s'

steps:
# 步驟 1: 設定環境 (包括服務帳戶冒充和後端配置)
- id: 'Setup-Environment'
  # 使用 gcloud 映像來處理認證和 GCS 相關操作
  name: 'gcr.io/cloud-builders/gcloud' 
  dir: 'terraform'
  entrypoint: /bin/bash
  args:
    - -c
    - |
      echo "--- 1. 設定服務帳戶冒充 ---"
      tf_sa_email=${_TF_SA_EMAIL}
      if [[ -n ${tf_sa_email} ]]; then
        # 配置 gcloud 使用指定的 SA 來獲取令牌
        gcloud config set auth/impersonate_service_account $tf_sa_email
      fi
      
      echo "--- 2. 準備後端配置 ---"
      # (可選：如果你的 backend.tf 中需要動態替換)
      # for i in `find -name 'backend.tf'`; do sed -i 's/UPDATE_ME/${_STATE_BUCKET_NAME}/' $i; done
      
# 步驟 2: 初始化 Terraform (tf init)
- id: 'Init'
  # 使用替換變數來定義映像名稱
  name: ${_TF_IMAGE} 
  dir: 'terraform'
  args:
    - 'init'
    - '-input=false'
    # 🚨 推薦做法：將後端配置從這裡移除，改為定義在 main.tf/versions.tf 中
    #    Cloud Build 會自動從那裡讀取 Bucket 名稱，或使用 -backend-config。
    #    這裡使用 -backend-config，確保它覆蓋任何靜態配置
    - '-backend-config=bucket=${_STATE_BUCKET_NAME}'
    - '-backend-config=prefix=terraform/projects/state'
  waitFor: ['Setup-Environment']

# 步驟 3: 建立執行計劃 (tf plan)
- id: 'Plan'
  name: ${_TF_IMAGE}
  dir: 'terraform'
  args:
    - 'plan'
    - '-input=false'
    - '-out=tfplan'
  waitFor: ['Init']

# 步驟 4: 應用執行計劃 (tf apply)
- id: 'Apply'
  name: ${_TF_IMAGE}
  dir: 'terraform'
  args:
    - 'apply'
    - '-input=false'
    - '-auto-approve' # 🚨 在 apply 階段，這應僅用於 CI/CD 部署
    - 'tfplan'
  # 這裡使用 'Plan' 的輸出檔案
  waitFor: ['Plan'] 

# 將 tfplan 檔案指定為構建工件
artifacts:
  objects:
    # 使用替換變數來定義儲存路徑
    location: 'gs://${_ARTIFACT_BUCKET_NAME}/terraform-artifacts/${BUILD_ID}/'
    # 確保路徑與 dir: 'terraform' 相對
    paths: ['terraform/tfplan']

# 處理 Cloud Build 服務帳戶的日誌選項 (如果您的觸發器有自定義 SA)
options:
  logging: 'CLOUD_LOGGING_ONLY'

timeout: '1200s'
